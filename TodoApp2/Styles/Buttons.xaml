<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TodoApp2">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Texts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--  BASE STYLES =============================================================================================  -->

    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <TextBlock Foreground="{TemplateBinding Foreground}"
                                   Background="Transparent"
                                   FontWeight="{TemplateBinding FontWeight}"
                                   FontStretch="{TemplateBinding FontStretch}"
                                   FontStyle="{TemplateBinding FontStyle}"
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Text="{TemplateBinding Content}"
                                   HorizontalAlignment="Center"
                                   TextOptions.TextFormattingMode="Display"
                                   TextOptions.TextHintingMode="Fixed"
                                   TextOptions.TextRenderingMode="ClearType"
                                   VerticalAlignment="Center" />
                        <!--<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonHoverStyle"
           BasedOn="{StaticResource ButtonBaseStyle}"
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="ButtonIconStyle"
           BasedOn="{StaticResource ButtonBaseStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="{StaticResource SegoeMDL2Assets}" />
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Medium, Source={x:Static local:ViewModelLocator.Instance}}" />
    </Style>


    <Style x:Key="ButtonIconHoverStyle"
           BasedOn="{StaticResource ButtonIconStyle}"
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="TextEditorButtonStyle"
           BasedOn="{StaticResource ButtonIconStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Regular, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource EditorButtonBrush}" />
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Opacity" Value="0.6" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverEditorButtonBgBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource CheckedEditorButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  TITLE BAR STYLES =============================================================================================  -->

    <Style x:Key="ButtonTitleBarStyle"
           BasedOn="{StaticResource ButtonIconStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Width" Value="45" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Foreground" Value="{DynamicResource TitleBarBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverTitleBarButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonTitleBarCloseWindowStyle"
           BasedOn="{StaticResource ButtonTitleBarStyle}"
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverCloseButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--  SIDE MENU STYLES =============================================================================================  -->

    <Style x:Key="ButtonIconHoverSideMenuStyle"
           BasedOn="{StaticResource ButtonIconHoverStyle}"
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            TextOptions.TextFormattingMode="Display"
                            TextOptions.TextHintingMode="Fixed"
                            TextOptions.TextRenderingMode="ClearType"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
    </Style>


    <Style x:Key="ButtonLoginStyle"
           BasedOn="{StaticResource ButtonHoverStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  SIDE MENU STYLES =============================================================================================  -->




    <!--  Quick action button  -->
    <Style x:Key="ButtonQuickActionStyle"
           BasedOn="{StaticResource ButtonIconStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="6 0" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding ApplicationViewModel.ApplicationSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource stringRGBToBrushConverter}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Quick action trash button  -->
    <Style x:Key="ButtonQuickActionRedStyle"
           BasedOn="{StaticResource ButtonQuickActionStyle}"
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource HoverCloseButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Color picker button  -->
    <Style x:Key="ButtonColorPickerStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="{TemplateBinding ActualHeight}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                BorderThickness="1"
                                CornerRadius="6">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Content=" " />
                        </Border>
                        <!--  To darken the current color on mouseover  -->
                        <Border x:Name="darkener"
                                Background="Black"
                                BorderThickness="0"
                                CornerRadius="6"
                                Opacity="0.2"
                                Visibility="Hidden" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="darkener"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Inner window button  -->

    <Style x:Key="ButtonInnerWindowStyle"
           BasedOn="{StaticResource ButtonIconHoverSideMenuStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Smaller, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="FontWeight" Value="Light" />
        <!--<Setter Property="Width" Value="30" />-->
    </Style>

    <!--<Style
        x:Key="ButtonInnerWindowStyle"
        BasedOn="{StaticResource ButtonIconStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="Width" Value="30" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding ApplicationViewModel.ApplicationSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource stringRGBToBrushConverter}}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <!--  Reminder window button  -->
    <Style x:Key="ReminderButtonStyle"
           BasedOn="{StaticResource ButtonBaseStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Large, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="FontWeight" Value="Light" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding ApplicationViewModel.ApplicationSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource stringRGBToBrushConverter}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ReminderBottomButtonStyle"
           BasedOn="{StaticResource ButtonIconHoverStyle}"
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            TextOptions.TextFormattingMode="Display"
                            TextOptions.TextHintingMode="Fixed"
                            TextOptions.TextRenderingMode="ClearType"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>

    <!--  Settings button  -->
    <Style x:Key="SettingsButtonStyle"
           BasedOn="{StaticResource ButtonIconStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Width" Value="40" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding ApplicationViewModel.ApplicationSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource stringRGBToBrushConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Toggle Button style  -->
    <Style x:Key="CustomToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="markGrid"
                          Width="44"
                          Height="20"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="Center">

                        <Border x:Name="normalBorder"
                                Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0.7"
                                CornerRadius="10"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <Border x:Name="checkedBorder"
                                Background="{Binding ApplicationViewModel.ApplicationSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource stringRGBToBrushConverter}}"
                                CornerRadius="10"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />


                        <!--  Fill="{TemplateBinding BorderBrush}"  -->
                        <Ellipse x:Name="normalOptionMark"
                                 Width="10"
                                 Height="10"
                                 Margin="6 0"
                                 VerticalAlignment="Center"
                                 Fill="{TemplateBinding BorderBrush}"
                                 RenderTransformOrigin="0.5 0.5"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                 StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="-10" />
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <Ellipse x:Name="checkedOptionMark"
                                 Width="10"
                                 Height="10"
                                 Margin="6 0"
                                 Fill="{Binding ApplicationViewModel.ApplicationSettings.AccentColor, 
                                    Source={x:Static local:ViewModelLocator.Instance}, 
                                    Converter={StaticResource toggleButtonDynamicBrushConverter}}"
                                 VerticalAlignment="Center"
                                 RenderTransformOrigin="0.5 0.5"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                 StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="10" />
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <!--  delete opacity=0 to turn on  -->
                        <Label x:Name="onLabel"
                               Margin="4 -1 0 0"
                               Content="ON"
                               FontSize="9"
                               Foreground="{TemplateBinding BorderBrush}"
                               Opacity="0" />

                        <!--  delete opacity=0 to turn on  -->
                        <Label x:Name="offLabel"
                               Margin="15 -1 0 0"
                               Content="OFF"
                               FontSize="9"
                               Foreground="{DynamicResource ToggleButtonBorderBrush}"
                               Opacity="0" />

                        <Grid.LayoutTransform>
                            <ScaleTransform ScaleX="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" ScaleY="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" />
                        </Grid.LayoutTransform>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="normalBorder"
                                    Property="Visibility"
                                    Value="Hidden" />
                            <Setter TargetName="normalOptionMark"
                                    Property="Visibility"
                                    Value="Hidden" />
                            <Setter TargetName="offLabel"
                                    Property="Visibility"
                                    Value="Hidden" />
                            <Setter TargetName="checkedBorder"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="checkedOptionMark"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="onLabel"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="normalBorder"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="normalOptionMark"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="offLabel"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="checkedBorder"
                                    Property="Visibility"
                                    Value="Hidden" />
                            <Setter TargetName="checkedOptionMark"
                                    Property="Visibility"
                                    Value="Hidden" />
                            <Setter TargetName="onLabel"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleSideMenuStyle"
           TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource CustomToggleStyle}">

        <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <Style x:Key="TextEditorToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="2 0" />
        <Setter Property="Foreground" Value="{DynamicResource EditorButtonBrush}" />
        
        <Setter Property="Opacity" Value="0.6" />
        <Setter Property="FontFamily" Value="{StaticResource SegoeMDL2Assets}" />
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Regular, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource CheckedEditorButtonBgBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource HoverEditorButtonBgBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource CheckedEditorButtonBgBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InternalColorPickerButtonStyle"
           BasedOn="{StaticResource ButtonBaseStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="ItemBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" />
                        </Border>
                        <Path Stroke="Red"
                              StrokeThickness="1"
                              Name="DiagonalLine"
                              Visibility="Collapsed">
                            <Path.Data>
                                <LineGeometry StartPoint="15,0" EndPoint="0,15" />
                            </Path.Data>
                            <Path.LayoutTransform>
                                <ScaleTransform ScaleX="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" ScaleY="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" />
                            </Path.LayoutTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}" Value="Transparent">
                            <Setter Property="Background"
                                    TargetName="ItemBorder"
                                    Value="White" />
                            <Setter Property="Visibility"
                                    TargetName="DiagonalLine"
                                    Value="Visible" />
                            <Setter Property="BorderThickness"
                                    TargetName="ItemBorder"
                                    Value="0.5" />
                            <Setter Property="BorderBrush"
                                    TargetName="ItemBorder"
                                    Value="Black" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!--  ====================================================================  -->

</ResourceDictionary>