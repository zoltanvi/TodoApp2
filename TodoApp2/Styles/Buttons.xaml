<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  Button Base Style  -->
    <Style x:Key="ButtonBaseStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource BaseButtonForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Icon Button Base Style  -->
    <Style
        x:Key="IconButtonBaseStyle"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="Button">
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="FontSize" Value="20" />
    </Style>

    <!--  Hovering Icon Button Base Style  -->
    <Style
        x:Key="HoveringIconButtonBaseStyle"
        BasedOn="{StaticResource IconButtonBaseStyle}"
        TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TitleBarHoverButtonBackgroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  TitleBar button  -->
    <Style
        x:Key="TitleBarButtonStyle"
        BasedOn="{StaticResource HoveringIconButtonBaseStyle}"
        TargetType="Button">
        <Setter Property="Width" Value="45" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource TitleBarButtonForegroundBrush}" />
    </Style>

    <!--  TitleBar Window button  -->
    <Style
        x:Key="WindowButtonStyle"
        BasedOn="{StaticResource TitleBarButtonStyle}"
        TargetType="Button">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Light" />
    </Style>

    <!--  TitleBar Window close button  -->
    <Style
        x:Key="WindowCloseButtonStyle"
        BasedOn="{StaticResource TitleBarButtonStyle}"
        TargetType="Button">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Light" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TitleBarHoverCloseButtonBackgroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Task Item button yellow  -->
    <Style
        x:Key="TaskItemButtonStyle"
        BasedOn="{StaticResource IconButtonBaseStyle}"
        TargetType="Button">
        <Setter Property="Width" Value="30" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TaskItemButtonCalendarHoverBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TaskItemButtonIconBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Task Item button yellow  -->
    <Style
        x:Key="TaskItemButtonYellowStyle"
        BasedOn="{StaticResource TaskItemButtonStyle}"
        TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TaskItemButtonPaletteHoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Task Item button red  -->
    <Style
        x:Key="TaskItemButtonRedStyle"
        BasedOn="{StaticResource TaskItemButtonStyle}"
        TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TaskItemButtonTrashHoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Color picker button  -->
    <Style x:Key="ColorPickerButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="{TemplateBinding ActualHeight}">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            BorderBrush="Black"
                            CornerRadius="60">
                            <ContentPresenter
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Content=" " />
                        </Border>
                        <!--  To darken the current color on mouseover  -->
                        <Border
                            x:Name="darkener"
                            Background="Black"
                            BorderThickness="0"
                            CornerRadius="60"
                            Opacity="0.2"
                            Visibility="Hidden" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="darkener" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TitleBar Window button  -->
    <Style
        x:Key="NotificationCloseButtonStyle"
        BasedOn="{StaticResource IconButtonBaseStyle}"
        TargetType="Button">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Light" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource NotificationButtonHoverForegroundBrush}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource NotificationButtonForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Reminder window button  -->
    <Style
        x:Key="ReminderButtonStyle"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="Button">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontWeight" Value="Light" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource NotificationButtonHoverForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource NotificationButtonForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Settings button  -->
    <Style
        x:Key="SettingsButtonStyle"
        BasedOn="{StaticResource IconButtonBaseStyle}"
        TargetType="Button">
        <Setter Property="Width" Value="40" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SettingsButtonHoverForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Toggle Button style  -->
    <Style x:Key="CustomToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        x:Name="markGrid"
                        Width="44"
                        Height="20"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="Center">

                        <Border
                            x:Name="normalBorder"
                            Background="Transparent"
                            BorderBrush="{DynamicResource ToggleButtonBorderBrush}"
                            BorderThickness="2"
                            CornerRadius="10"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <Border
                            x:Name="checkedBorder"
                            Background="{DynamicResource ToggleButtonBackgroundCheckedBrush}"
                            CornerRadius="10"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <!--<Border
                            x:Name="disabledBorder"
                            Background="{DynamicResource RadioButton.Disabled.Background}"
                            BorderBrush="{DynamicResource RadioButton.Disabled.Border}"
                            BorderThickness="2"
                            CornerRadius="10"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />-->

                        <Ellipse
                            x:Name="normalOptionMark"
                            Width="10"
                            Height="10"
                            Margin="6 0"
                            VerticalAlignment="Center"
                            Fill="{DynamicResource ToggleButtonGlyphBrush}"
                            RenderTransformOrigin="0.5 0.5"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="-10" />
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <Ellipse
                            x:Name="checkedOptionMark"
                            Width="10"
                            Height="10"
                            Margin="6 0"
                            VerticalAlignment="Center"
                            Fill="{DynamicResource ToggleButtonGlyphCheckedBrush}"
                            RenderTransformOrigin="0.5 0.5"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="10" />
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <!--  delete opacity=0 to turn on  -->
                        <Label
                            Name="onLabel"
                            Content="ON"
                            FontSize="9"
                            Opacity="0"
                            Foreground="{DynamicResource ToggleButtonGlyphCheckedBrush}"
                            Margin="4 -1 0 0" />

                        <!--  delete opacity=0 to turn on  -->
                        <Label
                            Name="offLabel"
                            Content="OFF"
                            FontSize="9"
                            Opacity="0"
                            Foreground="{DynamicResource ToggleButtonGlyphBrush}"
                            Margin="15 -1 0 0" />

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="normalBorder" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="normalOptionMark" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="offLabel" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="checkedBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="checkedOptionMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="onLabel" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="False">
                            <Setter TargetName="normalBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="normalOptionMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="offLabel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="checkedBorder" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="checkedOptionMark" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="onLabel" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>