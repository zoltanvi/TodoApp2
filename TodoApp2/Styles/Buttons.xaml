<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:TodoApp2">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Texts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--  BASE STYLES =============================================================================================  -->

    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="Transparent"
                            FontFamily="{TemplateBinding FontFamily}"
                            FontSize="{TemplateBinding FontSize}"
                            FontStretch="{TemplateBinding FontStretch}"
                            FontStyle="{TemplateBinding FontStyle}"
                            FontWeight="{TemplateBinding FontWeight}"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Content}"
                            TextOptions.TextFormattingMode="Display"
                            TextOptions.TextHintingMode="Fixed"
                            TextOptions.TextRenderingMode="ClearType" />
                        <!--<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ButtonHoverStyle"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="SettingsCategoryButtonStyle"
        BasedOn="{StaticResource ButtonHoverStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Medium, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="Margin" Value="3 3" />
        <Setter Property="Padding" Value="2 0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        CornerRadius="4"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Elevation_2}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Elevation_2}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ButtonIconStyle"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Medium, Source={x:Static local:ViewModelLocator.Instance}}" />
    </Style>


    <Style
        x:Key="ButtonIconHoverStyle"
        BasedOn="{StaticResource ButtonIconStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style
        x:Key="TextEditorButtonStyle"
        BasedOn="{StaticResource ButtonIconStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Regular, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource EditorButtonBrush}" />
        <Setter Property="Margin" Value="0 0" />
        <Setter Property="Background" Value="Transparent" />
        <!--<Setter Property="Padding" Value="5" />-->
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Elevation_3}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Elevation_3}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TITLE BAR STYLES =============================================================================================  -->

    <Style
        x:Key="ButtonTitleBarStyle"
        BasedOn="{StaticResource ButtonIconStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Width" Value="45" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Foreground" Value="{DynamicResource TitleBarBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverTitleBarButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ButtonTitleBarCloseWindowStyle"
        BasedOn="{StaticResource ButtonTitleBarStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverCloseButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style
        x:Key="ButtonIconHoverRectangleStyle"
        BasedOn="{StaticResource ButtonIconHoverStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        TextOptions.TextFormattingMode="Display"
                        TextOptions.TextHintingMode="Fixed"
                        TextOptions.TextRenderingMode="ClearType">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>


    <!--  SIDE MENU STYLES =============================================================================================  -->

    <Style
        x:Key="ButtonIconHoverSideMenuStyle"
        BasedOn="{StaticResource ButtonIconHoverRectangleStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Opacity" Value="0.4" />
    </Style>

    <Style
        x:Key="ButtonIconHoverCategoryDeleteStyle"
        BasedOn="{StaticResource ButtonIconStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Opacity" Value="0.4" />
    </Style>

    <!--  SIDE MENU STYLES =============================================================================================  -->




    <!--  Quick action button  -->
    <Style
        x:Key="ButtonQuickActionStyle"
        BasedOn="{StaticResource ButtonIconHoverRectangleStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Elevation_1}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="MaxHeight" Value="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4" />
                        <Border
                            x:Name="PART_hover"
                            Background="Transparent"
                            CornerRadius="4" />
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            TextOptions.TextFormattingMode="Display"
                            TextOptions.TextHintingMode="Fixed"
                            TextOptions.TextRenderingMode="ClearType" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_hover" Property="Background" Value="{DynamicResource Elevation_2}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Quick action trash button  -->
    <Style
        x:Key="ButtonQuickActionRedStyle"
        BasedOn="{StaticResource ButtonQuickActionStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource HoverCloseButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Color picker button  -->
    <Style x:Key="RichTextEditorLeftButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ToolTip" Value="Apply color (Ctrl + G)" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="{TemplateBinding ActualHeight}">

                        <!--  To darken the current color on mouseover  -->
                        <Border
                            x:Name="PART_hoverBackground"
                            Background="{DynamicResource Elevation_1}"
                            CornerRadius="6" />

                        <Border
                            x:Name="ItemBorder"
                            Background="{TemplateBinding Background,
                                                         Converter={StaticResource transparentPatternBrushConverter}}"
                            Width="{Binding UIScaler.ColorPickerItemSize, Source={x:Static local:ViewModelLocator.Instance}}"
                            Height="{Binding UIScaler.ColorPickerItemSize, Source={x:Static local:ViewModelLocator.Instance}}"
                            CornerRadius="6">
                            <ContentPresenter
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Content=" " />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_hoverBackground" Property="Background" Value="{DynamicResource Elevation_3}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Inner window button  -->

    <Style
        x:Key="ButtonInnerWindowStyle"
        BasedOn="{StaticResource ButtonIconHoverSideMenuStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Smaller, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="FontWeight" Value="Light" />
        <!--<Setter Property="Width" Value="30" />-->
    </Style>

    <!--<Style
        x:Key="ButtonInnerWindowStyle"
        BasedOn="{StaticResource ButtonIconStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="Width" Value="30" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding AppSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource accentColorBrushConverter}}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <!--  Reminder window button  -->
    <Style
        x:Key="ReminderButtonStyle"
        BasedOn="{StaticResource ButtonBaseStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Large, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="FontWeight" Value="Light" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding AppSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource accentColorBrushConverter}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ReminderBottomButtonStyle"
        BasedOn="{StaticResource ButtonIconHoverStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        TextOptions.TextFormattingMode="Display"
                        TextOptions.TextHintingMode="Fixed"
                        TextOptions.TextRenderingMode="ClearType">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontFamily" Value="{DynamicResource UIFont}" />
    </Style>

    <!--  Settings button  -->
    <Style
        x:Key="SettingsButtonStyle"
        BasedOn="{StaticResource ButtonIconStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Width" Value="40" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding AppSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource accentColorBrushConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextEditorArrowToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="Transparent"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        SnapsToDevicePixels="true">
                        <Grid Margin="0">

                            <Viewbox VerticalAlignment="Top">
                                <Label
                                    x:Name="ArrowTop"
                                    Margin="0"
                                    Padding="0"
                                    Content="{StaticResource SegoeIconChevronUp}"
                                    Style="{DynamicResource IconLabelStyle}"
                                    BorderThickness="0" />
                            </Viewbox>

                            <Viewbox VerticalAlignment="Top">
                                <Label
                                    x:Name="ArrowDown"
                                    Margin="0"
                                    Padding="0"
                                    Content="{StaticResource SegoeIconChevronDown}"
                                    Style="{DynamicResource IconLabelStyle}"
                                    BorderThickness="0" />
                            </Viewbox>

                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Visibility="Collapsed" />
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="ArrowDown" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ArrowTop" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="ArrowDown" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ArrowTop" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Toggle Button style  -->
    <Style x:Key="CustomToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderBrush" Value="{DynamicResource ToggleButtonBorderBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        x:Name="markGrid"
                        Width="44"
                        Height="20"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="Center">

                        <Border
                            x:Name="normalBorder"
                            Background="Transparent"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0.7"
                            CornerRadius="10"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <Border
                            x:Name="checkedBorder"
                            Background="{Binding AppSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource accentColorBrushConverter}}"
                            CornerRadius="10"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />


                        <!--  Fill="{TemplateBinding BorderBrush}"  -->
                        <Ellipse
                            x:Name="normalOptionMark"
                            Width="10"
                            Height="10"
                            Margin="6 0"
                            VerticalAlignment="Center"
                            Fill="{TemplateBinding BorderBrush}"
                            RenderTransformOrigin="0.5 0.5"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="-10" />
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <Ellipse
                            x:Name="checkedOptionMark"
                            Width="10"
                            Height="10"
                            Margin="6 0"
                            VerticalAlignment="Center"
                            Fill="{Binding AppSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource toggleButtonDynamicBrushConverter}}"
                            RenderTransformOrigin="0.5 0.5"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            StrokeThickness="0">
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="10" />
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <!--  delete opacity=0 to turn on  -->
                        <Label
                            x:Name="onLabel"
                            Margin="4 -1 0 0"
                            Content="ON"
                            FontSize="9"
                            Foreground="{TemplateBinding BorderBrush}"
                            Opacity="0" />

                        <!--  delete opacity=0 to turn on  -->
                        <Label
                            x:Name="offLabel"
                            Margin="15 -1 0 0"
                            Content="OFF"
                            FontSize="9"
                            Foreground="{DynamicResource ToggleButtonBorderBrush}"
                            Opacity="0" />

                        <Grid.LayoutTransform>
                            <ScaleTransform ScaleX="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" ScaleY="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" />
                        </Grid.LayoutTransform>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="normalBorder" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="normalOptionMark" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="offLabel" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="checkedBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="checkedOptionMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="onLabel" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="normalBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="normalOptionMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="offLabel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="checkedBorder" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="checkedOptionMark" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="onLabel" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ToggleSideMenuStyle"
        BasedOn="{StaticResource CustomToggleStyle}"
        TargetType="{x:Type ToggleButton}">

        <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <Style x:Key="TextEditorToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0 0" />
        <Setter Property="Foreground" Value="{DynamicResource EditorButtonBrush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Opacity" Value="0.6" />
        <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Regular, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Elevation_3}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Elevation_3}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Elevation_3}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  ====================================================================  -->

    <Style
        x:Key="TimePickerButtonStyle"
        BasedOn="{StaticResource ButtonIconHoverStyle}"
        TargetType="Button">
        <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}}">
                        <TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="Transparent"
                            FontFamily="{TemplateBinding FontFamily}"
                            FontSize="{TemplateBinding FontSize}"
                            FontStretch="{TemplateBinding FontStretch}"
                            FontStyle="{TemplateBinding FontStyle}"
                            FontWeight="{TemplateBinding FontWeight}"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Content}"
                            TextOptions.TextFormattingMode="Display"
                            TextOptions.TextHintingMode="Fixed"
                            TextOptions.TextRenderingMode="ClearType" />
                        <!--<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="TimePickerTextBoxStyle"
        TargetType="TextBox"
        BasedOn="{StaticResource BaseInputTextBoxStyle}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="MaxLength" Value="2" />

    </Style>

    <Style
        x:Key="TimePickerLabelStyle"
        BasedOn="{StaticResource BaseLabelClearTypeStyle}"
        TargetType="Label">
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Regular, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5 0" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="ClickableTextToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontSize" Value="{Binding UIScaler.FontSize.Large, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontFamily" Value="{DynamicResource UIFont}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="0 5 0 10" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Focusable="False"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="0"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--<Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>