<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <!--Order is important-->
        <ResourceDictionary Source="DarkTheme.xaml" />
        <ResourceDictionary Source="Texts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--Button Base Style-->
    <Style TargetType="Button" x:Key="ButtonBaseStyle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource BaseButtonForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Icon Button Base Style-->
    <Style TargetType="Button" x:Key="IconButtonBaseStyle" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="FontSize" Value="20" />
    </Style>

    <!--Hovering Icon Button Base Style-->
    <Style TargetType="Button" x:Key="HoveringIconButtonBaseStyle" BasedOn="{StaticResource IconButtonBaseStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TitleBarHoverButtonBackgroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TitleBar button-->
    <Style TargetType="Button" x:Key="TitleBarButtonStyle" BasedOn="{StaticResource HoveringIconButtonBaseStyle}">
        <Setter Property="Width" Value="45" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
    </Style>

    <!--TitleBar Window button-->
    <Style TargetType="Button" x:Key="WindowButtonStyle" BasedOn="{StaticResource TitleBarButtonStyle}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Light"></Setter>
    </Style>

    <!--Task Item button yellow-->
    <Style TargetType="Button" x:Key="TaskItemButtonStyle" BasedOn="{StaticResource IconButtonBaseStyle}">
        <Setter Property="Width" Value="30" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TaskItemButtonHoverBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TaskItemButtonIconBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Task Item button yellow-->
    <Style TargetType="Button" x:Key="TaskItemButtonYellowStyle" BasedOn="{StaticResource TaskItemButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TaskItemButtonHoverYellowBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Task Item button red-->
    <Style TargetType="Button" x:Key="TaskItemButtonRedStyle" BasedOn="{StaticResource TaskItemButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TaskItemButtonHoverRedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Color picker button-->
    <Style TargetType="Button" x:Key="ColorPickerButtonStyle">
        <!--<Setter Property="Foreground" Value="Wheat" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="{TemplateBinding ActualHeight}">
                        <Border CornerRadius="60" BorderThickness="0" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Content=" " />
                        </Border>
                        <!--To darken the current color on mouseover-->
                        <Border x:Name="darkener" CornerRadius="60" BorderThickness="0" Background="Black" Opacity="0.2" Visibility="Hidden" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="darkener" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TitleBar Window button-->
    <Style TargetType="Button" x:Key="NotificationCloseButtonStyle" BasedOn="{StaticResource IconButtonBaseStyle}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Light" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource NotificationButtonHoverForegroundBrush}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource NotificationButtonForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Reminder window button-->
    <Style TargetType="Button" x:Key="ReminderButtonStyle" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontWeight" Value="Light" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource NotificationButtonHoverForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource NotificationButtonForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Settings button-->
    <Style TargetType="Button" x:Key="SettingsButtonStyle" BasedOn="{StaticResource IconButtonBaseStyle}">
        <Setter Property="Width" Value="40" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SettingsButtonHoverForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Toggle Button style-->
    <Style x:Key="ToggleSwitchLeftStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource ToggleSwitchBorderBrush}" />
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="templateRoot"
                         Background="Transparent"
                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.0" Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                        <DoubleAnimation To="1" Duration="0:0:0.0" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="optionMark" Storyboard.TargetProperty="Fill" Duration="0:0:0.0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ToggleSwitchGlyphHoveredBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="optionMarkOn" Storyboard.TargetProperty="Fill" Duration="0:0:0.0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ToggleSwitchGlyphHoveredBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0" Storyboard.TargetName="pressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="optionMark" Storyboard.TargetProperty="Fill" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Pressed.Glyph}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="checkedBorder" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Disabled.On.Border}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="checkedBorder" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Disabled.On.Background}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation To="1" Duration="0" Storyboard.TargetName="disabledBorder" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="optionMark" Storyboard.TargetProperty="Fill" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Disabled.Glyph}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="optionMarkOn" Storyboard.TargetProperty="Fill" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Disabled.On.Glyph}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="optionMark" Storyboard.TargetProperty="Fill" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Static.Glyph}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Duration="0:0:0.5" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="optionMark">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="12" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="optionMark" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Checked.Glyph}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ToggleSwitchCheckedHoveredBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ToggleSwitchCheckedHoveredBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation To="1" Duration="0" Storyboard.TargetName="optionMarkOn" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                        <DoubleAnimation To="1" Duration="0" Storyboard.TargetName="checkedBorder" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="disabledBorder" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Disabled.On.Border}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="disabledBorder" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource RadioButton.Disabled.On.Background}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="Focused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="contentPresenter"
                                              Focusable="False" RecognizesAccessKey="True"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <Grid x:Name="markGrid" Grid.Column="1" Margin="8 0 0 0" Width="44" Height="20"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Border x:Name="normalBorder" Opacity="1" BorderThickness="2" CornerRadius="10"
                                BorderBrush="{TemplateBinding BorderBrush}" Background="{DynamicResource ToggleSwitchBackgroundBrush}" />
                            <Border x:Name="checkedBorder" Opacity="0" BorderThickness="0" CornerRadius="10"
                                BorderBrush="{DynamicResource ToggleSwitchCheckedBackgroundBrush}" Background="{DynamicResource ToggleSwitchCheckedBackgroundBrush}" />
                            <Border x:Name="hoverBorder" Opacity="0" BorderThickness="2" CornerRadius="10"
                                BorderBrush="{DynamicResource ToggleSwitchBorderHoveredBrush}" Background="Transparent" />
                            <Border x:Name="pressedBorder" Opacity="0" BorderThickness="0" CornerRadius="10"
                                BorderBrush="{DynamicResource RadioButton.Pressed.Border}" Background="{DynamicResource RadioButton.Pressed.Background}" />
                            <Border x:Name="disabledBorder" Opacity="0" BorderThickness="2" CornerRadius="10"
                                BorderBrush="{DynamicResource RadioButton.Disabled.Border}" Background="{DynamicResource RadioButton.Disabled.Background}" />
                            <Ellipse x:Name="optionMark"
                                 Height="10" Width="10" Fill="{DynamicResource ToggleSwitchGlyphBrush}" StrokeThickness="0"
                                  VerticalAlignment="Center" Margin="5,0" RenderTransformOrigin="0.5,0.5">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform X="-12" />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="optionMarkOn" Opacity="0"
										 Height="10" Width="10" Fill="{DynamicResource RadioButton.Checked.Glyph}" StrokeThickness="0"
										 VerticalAlignment="Center" Margin="5,0" RenderTransformOrigin="0.5,0.5">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform X="12" />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--STYLES ARE GENERATED BELOW-->
</ResourceDictionary>