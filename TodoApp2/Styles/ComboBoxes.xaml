<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:local="clr-namespace:TodoApp2">


    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="24" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="Border"
                Grid.ColumnSpan="2"
                Background="{DynamicResource ComboBoxButtonBgBrush}"
                BorderBrush="{DynamicResource ComboBoxBorderBrush}"
                BorderThickness="2"
                CornerRadius="0" />
            <Border
                Grid.Column="0"
                Margin="2"
                Background="{DynamicResource ComboBoxBgBrush}"
                BorderBrush="{DynamicResource ComboBoxBorderBrush}"
                BorderThickness="0,0,0,0"
                CornerRadius="0" />
            <Path
                x:Name="Arrow"
                Grid.Column="1"
                Margin="6,0,0,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                Fill="{DynamicResource ForegroundBrush}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ComboBoxButtonBgBrush}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource CheckedComboBoxButtonBgBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888" />
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border
            x:Name="PART_ContentHost"
            Background="{TemplateBinding Background}"
            Focusable="False" />
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Style.Resources>
            <Style BasedOn="{StaticResource DarkScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
        </Style.Resources>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Width="{TemplateBinding Width}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                        <ToggleButton
                            Name="ToggleButton"
                            ClickMode="Press"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Template="{StaticResource ComboBoxToggleButton}" />
                        <ContentPresenter
                            Name="ContentSite"
                            Margin="10,5,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="False" />
                        <TextBox
                            x:Name="PART_EditableTextBox"
                            Margin="10,3,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Background="#FFC15C5C"
                            Focusable="True"
                            Foreground="LightBlue"
                            IsReadOnly="{TemplateBinding IsReadOnly}"
                            Style="{x:Null}"
                            Template="{StaticResource ComboBoxTextBox}"
                            Visibility="Hidden" />
                        <Popup
                            Name="Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="Bottom"
                            PopupAnimation="Slide">

                            <Grid
                                Name="DropDown"
                                MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                SnapsToDevicePixels="True">
                                <Border
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource ComboBoxBgBrush}"
                                    BorderBrush="{DynamicResource ComboBoxBorderBrush}"
                                    BorderThickness="1" />
                                <ScrollViewer Margin="0,4" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers />
    </Style>

    <!--  SimpleStyles: ComboBoxItem  -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        Name="Border"
                        Padding="2"
                        SnapsToDevicePixels="true">
                        <ContentPresenter Margin="8,2,0,2" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource HoverComboBoxDropDownItemBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  COLOR PICKER STYLE  -->

    <ControlTemplate x:Key="ColorPickerToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="10" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="Border"
                Grid.ColumnSpan="2"
                Background="Transparent"
                BorderBrush="{DynamicResource ComboBoxBorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="0" />
            <Path
                x:Name="Arrow"
                Grid.Column="1"
                Margin="0,0,0,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Data="M 0,0 L 0,2 L 4,6 L 8,2 L 8,0 L 4,0 z"
                Fill="{DynamicResource ForegroundBrush}" />
            <Grid.LayoutTransform>
                <ScaleTransform ScaleX="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" ScaleY="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" />
            </Grid.LayoutTransform>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="{Binding ApplicationViewModel.ApplicationSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource stringRGBToBrushConverter}}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true" />
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#888888" />
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="ColorPickerTableStyle" TargetType="{x:Type ComboBox}">
        <Style.Resources>
            <Style BasedOn="{StaticResource DarkScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
        </Style.Resources>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Height" Value="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="Width" Value="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Grid Width="{TemplateBinding Width}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                            <ToggleButton
                                x:Name="ToggleButton"
                                BorderThickness="0"
                                ClickMode="Press"
                                Focusable="false"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Template="{StaticResource ColorPickerToggleButton}" />
                            <ContentPresenter
                                x:Name="ContentSite"
                                Margin="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False" />
                            <Popup
                                x:Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Fade">

                                <Grid
                                    x:Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="{DynamicResource ComboBoxBgBrush}"
                                        BorderBrush="{DynamicResource ComboBoxBorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="4" />

                                    <WrapPanel
                                        Width="{Binding UIScaler.ColorPickerDropDownWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                                        Margin="8"
                                        IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        Orientation="Horizontal" />

                                </Grid>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ColorPickerOnlyDropDownStyle"
        BasedOn="{StaticResource ColorPickerTableStyle}"
        TargetType="{x:Type ComboBox}">
        <Setter Property="Width" Value="{Binding UIScaler.ColorPickerOnlyDropDownWidth, Source={x:Static local:ViewModelLocator.Instance}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid Width="{TemplateBinding Width}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                            <ToggleButton
                                x:Name="ToggleButton"
                                BorderThickness="0"
                                ClickMode="Press"
                                Focusable="false"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Template="{StaticResource ColorPickerToggleButton}" />
                            <ContentPresenter
                                x:Name="ContentSite"
                                Margin="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False"
                                Visibility="Collapsed" />
                            <Popup
                                x:Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Fade">

                                <Grid
                                    x:Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="{DynamicResource ComboBoxBgBrush}"
                                        BorderBrush="{DynamicResource CommonBorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="4" />

                                    <WrapPanel
                                        Width="{Binding UIScaler.ColorPickerDropDownWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                                        Margin="8"
                                        IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        Orientation="Horizontal" />

                                </Grid>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverEditorButtonBgBrush}" />
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <DataTemplate x:Key="ColorPickerItemTemplate">
        <Grid>
            <Border
                x:Name="ItemBorder"
                Width="{Binding UIScaler.ColorPickerItemSize, Source={x:Static local:ViewModelLocator.Instance}}"
                Height="{Binding UIScaler.ColorPickerItemSize, Source={x:Static local:ViewModelLocator.Instance}}"
                Background="{Binding}"
                CornerRadius="2" />

            <Path
                Name="DiagonalLine"
                Stroke="Red"
                StrokeThickness="1"
                Visibility="Collapsed">
                <Path.Data>
                    <LineGeometry StartPoint="15,0" EndPoint="0,15" />
                </Path.Data>
                <Path.LayoutTransform>
                    <ScaleTransform ScaleX="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" ScaleY="{Binding UIScaler.ScaleValue, Source={x:Static local:ViewModelLocator.Instance}}" />
                </Path.LayoutTransform>
            </Path>

        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding}" Value="Transparent">
                <Setter TargetName="ItemBorder" Property="Background" Value="White" />
                <Setter TargetName="DiagonalLine" Property="Visibility" Value="Visible" />
                <Setter TargetName="ItemBorder" Property="BorderThickness" Value="0.5" />
                <Setter TargetName="ItemBorder" Property="BorderBrush" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="">
                <Setter TargetName="ItemBorder" Property="Background" Value="White" />
                <Setter TargetName="DiagonalLine" Property="Visibility" Value="Visible" />
                <Setter TargetName="ItemBorder" Property="BorderThickness" Value="0.5" />
                <Setter TargetName="ItemBorder" Property="BorderBrush" Value="Black" />
            </DataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="ColorPickerItemContainerStyle" TargetType="ComboBoxItem">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border
                        Name="PaddingBorder"
                        Padding="3"
                        Background="Transparent">
                        <Border
                            Name="HighlightBorder"
                            BorderBrush="{Binding}"
                            CornerRadius="2">
                            <ContentPresenter />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="HighlightBorder" Property="BorderThickness" Value="1" />
                            <Setter TargetName="HighlightBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="HighlightBorder" Property="Padding" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorPickerButtonStyle" TargetType="local:ColorPickerComboBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorPickerComboBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Grid Grid.Column="0">
                            <Button
                                Width="{Binding UIScaler.ColorPickerItemSize, Source={x:Static local:ViewModelLocator.Instance}}"
                                Height="{Binding UIScaler.ColorPickerItemSize, Source={x:Static local:ViewModelLocator.Instance}}"
                                Margin="3"
                                Background="{Binding DisplayColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource stringRGBToBrushConverter}}"
                                Command="{Binding ApplyDisplayColorCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{DynamicResource InternalColorPickerButtonStyle}" />
                        </Grid>

                        <local:ColorPickerComboBox
                            Grid.Column="1"
                            Focusable="False"
                            IsSynchronizedWithCurrentItem="True"
                            ItemContainerStyle="{StaticResource ColorPickerItemContainerStyle}"
                            ItemTemplate="{StaticResource ColorPickerItemTemplate}"
                            ItemsSource="{Binding ColorListProvider.Items, Source={x:Static local:ViewModelLocator.Instance}}"
                            Style="{DynamicResource ColorPickerOnlyDropDownStyle}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>