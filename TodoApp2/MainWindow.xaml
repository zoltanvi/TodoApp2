<Window
    x:Class="TodoApp2.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:TodoApp2"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:Behaviors="http://schemas.microsoft.com/xaml/behaviors"
    Name="TodoApp2Window"
    Title="TodoApp"
    Width="380"
    Height="500"
    MinWidth="{Binding WindowMinimumWidth}"
    MinHeight="{Binding WindowMinimumHeight}"
    AllowsTransparency="True"
    AutomationProperties.AutomationId="TodoApp2Window"
    WindowStartupLocation="CenterScreen"
    WindowStyle="None"
    mc:Ignorable="d">

    <Behaviors:Interaction.Triggers>
        <Behaviors:EventTrigger EventName="PreviewMouseWheel">
            <Behaviors:CallMethodAction MethodName="OnPreviewMouseWheel" TargetObject="{Binding}" />
        </Behaviors:EventTrigger>
        <Behaviors:EventTrigger EventName="KeyDown">
            <Behaviors:CallMethodAction MethodName="OnKeyDown" TargetObject="{Binding}" />
        </Behaviors:EventTrigger>
    </Behaviors:Interaction.Triggers>

    <Window.Resources>
        <Style TargetType="{x:Type local:MainWindow}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <!--  Outer border with the drop shadow margin  -->

                        <Border Padding="{Binding IsMaximizedOrDocked, Converter={StaticResource boolToBorderThicknessConverter}}" Background="#01000000">
                            <Border.CornerRadius>
                                <MultiBinding>
                                    <MultiBinding.Converter>
                                        <local:RoundedCornersMultiConverter />
                                    </MultiBinding.Converter>
                                    <Binding Path="ApplicationViewModel.ApplicationSettings.RoundedWindowCorners" Source="{x:Static local:ViewModelLocator.Instance}" />
                                    <Binding Path="IsRoundedCornersAllowed" />
                                </MultiBinding>
                            </Border.CornerRadius>

                            <Border.Clip>
                                <RectangleGeometry
                                    RadiusX="{Binding CornerRadius.TopLeft, RelativeSource={RelativeSource AncestorType={x:Type Border}}}"
                                    RadiusY="{Binding RadiusX, RelativeSource={RelativeSource Self}}"
                                    Rect="{Binding OuterClipRect}" />
                            </Border.Clip>

                            <Border
                                local:SizeObserver.Observe="True"
                                local:SizeObserver.ObservedWidth="{Binding MyWidth, Mode=OneWayToSource}"
                                local:SizeObserver.ObservedHeight="{Binding MyHeight, Mode=OneWayToSource}">
                                <Border.CornerRadius>
                                    <MultiBinding>
                                        <MultiBinding.Converter>
                                            <local:RoundedCornersMultiConverter />
                                        </MultiBinding.Converter>
                                        <Binding Path="ApplicationViewModel.ApplicationSettings.RoundedWindowCorners" Source="{x:Static local:ViewModelLocator.Instance}" />
                                        <Binding Path="IsRoundedCornersAllowed" />
                                    </MultiBinding>
                                </Border.CornerRadius>

                                <Border.Clip>
                                    <RectangleGeometry
                                        RadiusX="{Binding CornerRadius.TopLeft, RelativeSource={RelativeSource AncestorType={x:Type Border}}}"
                                        RadiusY="{Binding RadiusX, RelativeSource={RelativeSource Self}}"
                                        Rect="{Binding ClipRect}" />
                                </Border.Clip>

                                <!--  Main window outline  -->
                                <Grid>

                                    <!--  Outer dragging border  -->
                                    <!--  BorderBrush="{DynamicResource AppBorderBrush}"  -->
                                    <Border
                                        Panel.ZIndex="2"
                                        BorderBrush="{Binding ApplicationViewModel.ApplicationSettings.AppBorderColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource appBorderBrushConverter}}"
                                        BorderThickness="1">

                                        <Border.CornerRadius>
                                            <MultiBinding>
                                                <MultiBinding.Converter>
                                                    <local:RoundedCornersMultiConverter />
                                                </MultiBinding.Converter>
                                                <Binding Path="ApplicationViewModel.ApplicationSettings.RoundedWindowCorners" Source="{x:Static local:ViewModelLocator.Instance}" />
                                                <Binding Path="IsRoundedCornersAllowed" />
                                            </MultiBinding>
                                        </Border.CornerRadius>

                                    </Border>

                                    <!--  Window border and drop shadow  -->
                                    <Border Background="{DynamicResource PageBgBrush}">
                                        <Border.CornerRadius>
                                            <MultiBinding>
                                                <MultiBinding.Converter>
                                                    <local:RoundedCornersMultiConverter />
                                                </MultiBinding.Converter>
                                                <Binding Path="ApplicationViewModel.ApplicationSettings.RoundedWindowCorners" Source="{x:Static local:ViewModelLocator.Instance}" />
                                                <Binding Path="IsRoundedCornersAllowed" />
                                            </MultiBinding>
                                        </Border.CornerRadius>

                                        <Grid>
                                            <Grid.RowDefinitions>

                                                <!--  Title Bar  -->
                                                <RowDefinition Height="{Binding TitleBarGridHeight, FallbackValue=35}" />
                                                <!--  Window Content  -->
                                                <RowDefinition Height="*" />
                                            </Grid.RowDefinitions>

                                            <!--  Title Bar  -->
                                            <Border
                                                Grid.Column="0"
                                                Panel.ZIndex="0"
                                                Background="{DynamicResource TitleBarBgBrush}">

                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto" />
                                                        <ColumnDefinition Width="Auto" />
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>


                                                    <!--  Side menu button  -->
                                                    <Button
                                                        Name="SideMenuButton"
                                                        Grid.Column="0"
                                                        Command="{Binding ToggleSideMenuCommand}"
                                                        AutomationProperties.AutomationId="SideMenuButton"
                                                        Content="{DynamicResource SegoeIconMenu}"
                                                        Style="{DynamicResource ButtonTitleBarStyle}"
                                                        FontSize="16" />

                                                    <Label
                                                        Content="{DynamicResource SegoeIconSave}"
                                                        Grid.Column="1"
                                                        HorizontalAlignment="Center"
                                                        VerticalAlignment="Center"
                                                        Opacity="0"
                                                        local:SaveIconAnimator.Animate="{Binding ApplicationViewModel.SaveIconVisible, Source={x:Static local:ViewModelLocator.Instance}}"
                                                        Style="{DynamicResource IconLabelStyle}"
                                                        FontSize="16"
                                                        Foreground="{DynamicResource TitleBarBrush}" />

                                                    <!--  Title bar date  -->
                                                    <Grid Grid.Column="1" Grid.ColumnSpan="2">

                                                        <Label
                                                            Visibility="{Binding ApplicationViewModel.ApplicationSettings.IsTitleBarDateVisible, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}"
                                                            Content="{Binding CurrentTime}"
                                                            Foreground="{DynamicResource TitleBarBrush}"
                                                            VerticalAlignment="Center"
                                                            HorizontalAlignment="Center" />
                                                    </Grid>

                                                    <!--  Window buttons  -->
                                                    <StackPanel Grid.Column="3" Orientation="Horizontal">
                                                        <Button
                                                            x:Name="MinimizeWindow"
                                                            AutomationProperties.AutomationId="MinimizeWindow"
                                                            Command="{Binding MinimizeCommand}"
                                                            Content="{DynamicResource SegoeIconMinimizeWindow}"
                                                            Style="{DynamicResource ButtonTitleBarStyle}" />
                                                        <Button
                                                            x:Name="MaximizeWindow"
                                                            AutomationProperties.AutomationId="MaximizeWindow"
                                                            Command="{Binding MaximizeCommand}"
                                                            Content="{Binding IsMaximized, Converter={StaticResource boolToMaximizeRestoreConverter}}"
                                                            Style="{DynamicResource ButtonTitleBarStyle}" />
                                                        <Button
                                                            Name="CloseWindow"
                                                            AutomationProperties.AutomationId="CloseWindow"
                                                            Command="{Binding CloseCommand}"
                                                            Content="{DynamicResource SegoeIconCloseWindow2}"
                                                            Style="{DynamicResource ButtonTitleBarCloseWindowStyle}" />
                                                    </StackPanel>
                                                </Grid>
                                            </Border>

                                            <!--  Page content  -->
                                            <Border
                                                Grid.Row="1"
                                                Padding="{Binding InnerContentPadding}"
                                                ClipToBounds="True">
                                                <ContentPresenter AutomationProperties.AutomationId="MainPageContent" Content="{TemplateBinding Content}" />
                                            </Border>
                                        </Grid>
                                    </Border>
                                </Grid>
                            </Border>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <WindowChrome.WindowChrome>
        <WindowChrome
            CaptionHeight="{Binding TitleBarHeight}"
            GlassFrameThickness="0"
            CornerRadius="0"
            ResizeBorderThickness="{Binding ResizeBorderThickness}" />
    </WindowChrome.WindowChrome>

    <Grid>
        <Grid x:Name="Grid">

            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="6" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!--  Navigator menu panel  -->
            <Grid Grid.Column="0">
                <local:SideMenuControl x:Name="SideMenu" AutomationProperties.AutomationId="SideMenuControl">

                    <!--  Side menu page  -->
                    <Frame
                        local:NoFrameHistory.Value="True"
                        AutomationProperties.AutomationId="SideMenuPage"
                        Content="{Binding}"
                        DataContext="{Binding ApplicationViewModel.SideMenuPage, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource applicationPageValueConverter}}" />
                </local:SideMenuControl>
            </Grid>

            <!--  Current page  -->
            <Frame
                Grid.Column="2"
                Margin="-6 0 0 0"
                local:NoFrameHistory.Value="True"
                AutomationProperties.AutomationId="MainPageFrame"
                Content="{Binding}"
                DataContext="{Binding ApplicationViewModel.MainPage, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource applicationPageValueConverter}}" />

            <GridSplitter
                x:Name="Resizer"
                Background="{Binding ApplicationViewModel.ApplicationSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource accentColorBrushConverter}}"
                Grid.Column="1"
                Opacity="0"
                Width="6"
                HorizontalAlignment="Center"
                VerticalAlignment="Stretch"
                Cursor="SizeWE">
                <GridSplitter.Style>
                    <Style TargetType="GridSplitter">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">

                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetProperty="Opacity"
                                                To="0.7"
                                                Duration="0:0:0.3" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetProperty="Opacity"
                                                To="0"
                                                Duration="0:0:0.1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>

                        </Style.Triggers>
                    </Style>
                </GridSplitter.Style>

            </GridSplitter>

            <!--  Overlay background  -->
            <local:OverlayBackgroundControl Grid.ColumnSpan="3" AutomationProperties.AutomationId="OverlayBackgroundControl" />

        </Grid>

        <Grid>
            <!--  Message line  -->
            <Grid
                Grid.ColumnSpan="3"
                VerticalAlignment="Top"
                local:AnimateSlideInFromTopProperty.Value="{Binding MessageService.MessageLineVisible, Source={x:Static local:ViewModelLocator.Instance}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Border
                    Margin="10"
                    Padding="10 0"
                    Grid.Column="1"
                    MaxHeight="100"
                    CornerRadius="4"
                    SnapsToDevicePixels="True"
                    Background="{Binding MessageService.MessageType, Source={x:Static local:ViewModelLocator.Instance}, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource messageTypeToBackgroundConverter}}">
                    <Grid Margin="10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <TextBlock
                            Grid.Column="0"
                            DockPanel.Dock="Left"
                            TextWrapping="Wrap"
                            FontSize="{Binding UIScaler.FontSize.Regular}"
                            FontFamily="{DynamicResource UIFont}"
                            FontWeight="Bold"
                            Text="{Binding MessageService.Message, Source={x:Static local:ViewModelLocator.Instance}}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Foreground="{Binding MessageService.MessageType, Source={x:Static local:ViewModelLocator.Instance}, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource messageTypeToForegroundConverter}}" />

                        <Button
                            Grid.Column="1"
                            DockPanel.Dock="Right"
                            Margin="30 2 0 2"
                            Visibility="{Binding MessageService.UndoButtonVisible, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}"
                            Command="{Binding UndoCommand}"
                            Content="Undo"
                            Style="{DynamicResource ReminderBottomButtonStyle}" />
                    </Grid>

                </Border>
            </Grid>
        </Grid>

    </Grid>
</Window>