<UserControl
    x:Class="TodoApp2.TaskListItemControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Behaviors="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dd="urn:gong-wpf-dragdrop"
    xmlns:local="clr-namespace:TodoApp2"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    x:Name="TaskListItemUC"
    d:DesignHeight="60"
    d:DesignWidth="350"
    dd:DragDrop.IsDragSource="{Binding TextEditorViewModel.IsEditMode}"
    AutomationProperties.AutomationId="TaskListItemUC"
    mc:Ignorable="d">

    <UserControl.ContextMenu>

        <ContextMenu x:Name="MyContext">
            <MenuItem
                Command="{Binding Path=PlacementTarget.Tag.ToggleTaskIsDoneCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                Header="Mark as completed"
                Visibility="{Binding Path=PlacementTarget.DataContext.IsDone, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityNegatedConverter}}" />
            <MenuItem
                Command="{Binding Path=PlacementTarget.Tag.ToggleTaskIsDoneCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                Header="Mark as not completed"
                Visibility="{Binding Path=PlacementTarget.DataContext.IsDone, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityConverter}}" />

            <Separator />
            <MenuItem
                Command="{Binding Path=PlacementTarget.Tag.PinTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                Header="Pin item"
                Visibility="{Binding Path=PlacementTarget.DataContext.Pinned, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityNegatedConverter}}" />

            <MenuItem
                Command="{Binding Path=PlacementTarget.Tag.UnpinTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                Header="Unpin item"
                Visibility="{Binding Path=PlacementTarget.DataContext.Pinned, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityConverter}}" />

            <MenuItem Command="{Binding Path=PlacementTarget.DataContext.EditItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Edit" />
            <MenuItem Command="{Binding Path=PlacementTarget.DataContext.OpenReminderCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Set reminder" />
            <MenuItem Header="Move to" ItemsSource="{Binding CategoryListService.InactiveCategories, Source={x:Static local:ViewModelLocator.Instance}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}" />
                        <Setter Property="Command" Value="{Binding Path=DataContext.MoveToCategoryCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}" />
                        <Setter Property="CommandParameter">
                            <Setter.Value>
                                <MultiBinding Converter="{local:TaskContextMenuCommandParameterConverter}">
                                    <MultiBinding.Bindings>
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType={x:Type local:TaskListItemControl}}" />
                                        <Binding Path="." />
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <Separator />
            <MenuItem Header="Marker color">
                <MenuItem.Template>
                    <ControlTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Label Style="{DynamicResource BaseLabelClearTypeStyle}" Margin="6 0 0 0">Marker color</Label>
                            <local:SingletonColorPicker
                                Grid.Column="2"
                                SelectedColorString="{Binding DataContext.Color, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListItemControl}}}"
                                Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                                Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                                Margin="4 0 0 0"
                                ToolTip="Marker color" />
                        </Grid>
                    </ControlTemplate>
                </MenuItem.Template>
            </MenuItem>

            <MenuItem Header="Background color">
                <MenuItem.Template>
                    <ControlTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Label Style="{DynamicResource BaseLabelClearTypeStyle}" Margin="6 0 0 0">Background color</Label>
                            <local:SingletonColorPicker
                                Grid.Column="2"
                                SelectedColorString="{Binding DataContext.BackgroundColor, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListItemControl}}}"
                                Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                                Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                                Margin="4 0 0 0"
                                ToolTip="Background color" />
                        </Grid>
                    </ControlTemplate>
                </MenuItem.Template>
            </MenuItem>

            <MenuItem Header="Border color">
                <MenuItem.Template>
                    <ControlTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Label Style="{DynamicResource BaseLabelClearTypeStyle}" Margin="6 0 0 0">Border color</Label>
                            <local:SingletonColorPicker
                                Grid.Column="2"
                                SelectedColorString="{Binding DataContext.BorderColor, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListItemControl}}}"
                                Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                                Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                                Margin="4 0 0 0"
                                ToolTip="Border color" />
                        </Grid>
                    </ControlTemplate>
                </MenuItem.Template>
            </MenuItem>

            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Reset colors in category" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetBackgroundColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Reset background colors in category" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetBorderColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Reset border colors in category" />
            <Separator />
            <MenuItem
                Command="{Binding Path=PlacementTarget.Tag.DeleteTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                Header="Delete" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteDoneCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Delete done items" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteAllCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Delete all items" />

        </ContextMenu>
    </UserControl.ContextMenu>

    <Grid Background="Transparent" Margin="{Binding Path=AppSettings.TaskListHasMargin, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource taskListItemMarginConverter}}">

        <!--  COLOR BAR  -->
        <!--  CornerRadius="{Binding Path=AppSettings.IsColorBarRounded, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToCornerRadiusConverter}}">  -->
        <Border
            Margin="4 2"
            Panel.ZIndex="1000"
            HorizontalAlignment="Left"
            AutomationProperties.AutomationId="TaskListItemColorBar"
            Background="{Binding Color, Converter={StaticResource stringRGBToBrushConverter}}"
            CornerRadius="3 0 0 3">
            <Border.Width>
                <MultiBinding>
                    <MultiBinding.Converter>
                        <local:ColorBarBorderWidthMultiValueConverter />
                    </MultiBinding.Converter>
                    <Binding Path="AppSettings.ColorBarThickness" Source="{x:Static local:ViewModelLocator.Instance}" />
                    <Binding Path="UIScaler.ScaleValue" />
                </MultiBinding>
            </Border.Width>
        </Border>

        <!--  ITEM BORDER  -->
        <Border
            Margin="4 2"
            BorderBrush="{Binding BorderColor, Converter={StaticResource taskBorderBrushConverter}}"
            BorderThickness="1"
            CornerRadius="3"
            Visibility="{Binding AppSettings.IsItemBorderVisible, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />

        <!--  Editor indicator  -->
        <Border
            Margin="2 0"
            BorderThickness="1.5"
            CornerRadius="3"
            BorderBrush="{Binding AppSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource accentColorBrushConverter}}"
            Visibility="{Binding TextEditorViewModel.IsEditMode, Converter={StaticResource boolToVisibilityConverter}}" />


        <Border
            x:Name="TaskListItemBackground"
            Margin="4 2"
            BorderBrush="Transparent"
            BorderThickness="1"
            CornerRadius="3">
            <Border.Background>
                <MultiBinding Converter="{local:BackgroundBrushConverter}" UpdateSourceTrigger="PropertyChanged">
                    <Binding Path="IsDone" />
                    <Binding Path="AppSettings.IsItemBackgroundVisible" Source="{x:Static local:ViewModelLocator.Instance}" />
                </MultiBinding>
            </Border.Background>

            <Grid>
                <Grid.ColumnDefinitions>
                    <!--  Color bar column  -->
                    <ColumnDefinition>
                        <ColumnDefinition.Width>
                            <MultiBinding>
                                <MultiBinding.Converter>
                                    <local:ColorBarGridWidthMultiValueConverter />
                                </MultiBinding.Converter>
                                <Binding Path="AppSettings.ColorBarThickness" Source="{x:Static local:ViewModelLocator.Instance}" />
                                <Binding Path="UIScaler.ScaleValue" />
                            </MultiBinding>
                        </ColumnDefinition.Width>
                    </ColumnDefinition>

                    <!--  Checkbox column  -->
                    <ColumnDefinition Width="auto" />
                    <!--  Main content column, also the hidden buttons column  -->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <!--  ITEM BACKGROUND  -->
                <Border
                    Grid.ColumnSpan="3"
                    BorderBrush="Transparent"
                    BorderThickness="0"
                    CornerRadius="3"
                    Background="{Binding BackgroundColor, Converter={StaticResource stringRGBToBrushConverter}}"
                    Opacity="0.3" />

                <!--  Task Checkbox  -->
                <CheckBox
                    Grid.Column="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    IsEnabled="{Binding TextEditorViewModel.IsDisplayMode}"
                    AutomationProperties.AutomationId="TaskListItemCheckBox"
                    Command="{Binding Path=DataContext.TaskIsDoneModifiedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}"
                    CommandParameter="{Binding DataContext, ElementName=TaskListItemUC}"
                    Foreground="{Binding ElementName=TaskListItemBackground, Path=Background}"
                    IsChecked="{Binding IsDone}"
                    Style="{DynamicResource TaskCheckBoxStyle}"
                    Margin="{Binding UIScaler.TaskCheckBoxWidth, Converter={StaticResource taskCheckboxMarginConverter}}"
                    Visibility="{Binding AppSettings.IsQuickActionsCheckboxEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />

                <!--  Pin icon  -->
                <Border
                    Grid.Column="2"
                    Margin="0"
                    HorizontalAlignment="Right"
                    Background="Transparent">
                    <Border.Visibility>
                        <MultiBinding>
                            <MultiBinding.Converter>
                                <local:BoolToVisibilityAndConverter />
                            </MultiBinding.Converter>
                            <Binding Path="Pinned" />
                            <Binding Path="TextEditorViewModel.IsDisplayMode" />
                        </MultiBinding>
                    </Border.Visibility>

                    <Grid>
                        <Label
                            Padding="2"
                            Content="{DynamicResource SegoeIconPinFilled}"
                            FontFamily="{StaticResource IconFont}"
                            Foreground="{Binding AppSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource accentColorBrushConverter}}" />
                        <Label
                            Padding="2"
                            Content="{DynamicResource SegoeIconPin}"
                            FontFamily="{StaticResource IconFont}"
                            Foreground="{Binding AppSettings.AccentColor, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource accentColorBrushConverter}}" />
                        <Grid.LayoutTransform>
                            <!--  -1 to mirror it  -->
                            <ScaleTransform ScaleX="{Binding UIScaler.ScaleValue}" ScaleY="{Binding UIScaler.ScaleValue}" />
                        </Grid.LayoutTransform>
                    </Grid>
                </Border>

                <!--  Main content  -->
                <Border Grid.Column="2" Margin="{Binding AppSettings.TaskSpacing, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource taskSpacingToMarginConverter}}">
                    <Grid Margin="0 2 10 2">
                        <Grid.RowDefinitions>
                            <!--  Task description row  -->
                            <RowDefinition Height="*" />
                            <!--  Timestamp row  -->
                            <RowDefinition Height="Auto" />
                            <!--  Category row  -->
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <!--  Task description  -->
                        <local:RichTextEditorControl Grid.Row="0" DataContext="{Binding TextEditorViewModel}" />

                        <!--  Catch double click to change to edit mode  -->
                        <Border
                            Grid.Row="0"
                            Background="Transparent"
                            Visibility="{Binding TextEditorViewModel.IsEditMode, Converter={StaticResource boolToVisibilityNegatedConverter}}">
                            <Border.InputBindings>
                                <MouseBinding Command="{Binding EditItemCommand}" Gesture="LeftDoubleClick" />
                            </Border.InputBindings>
                        </Border>

                        <WrapPanel
                            Grid.Row="1"
                            Margin="1 0"
                            Orientation="Horizontal">

                            <local:TagControl TagTitle="Category: " TagBody="{Binding CategoryId, Converter={StaticResource idToCategoryNameConverter}}" />
                            <local:TagControl
                                TagTitle="Created: "
                                TagBody="{Binding CreationDate, Converter={StaticResource longToTimestampConverter}}"
                                Opacity="{Binding IsDone, Converter={StaticResource boolToTaskOpacityConverter}}"
                                Visibility="{Binding AppSettings.IsCreationDateVisible, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />
                            <local:TagControl
                                TagTitle="Modified: "
                                TagBody="{Binding ModificationDate, Converter={StaticResource longToTimestampConverter}}"
                                Opacity="{Binding IsDone, Converter={StaticResource boolToTaskOpacityConverter}}"
                                Visibility="{Binding AppSettings.IsModificationDateVisible, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />
                        </WrapPanel>

                    </Grid>
                </Border>


                <!--  Hidden buttons  -->
                <Border
                    x:Name="HoverButtonBorder"
                    Grid.Column="2"
                    Padding="0"
                    HorizontalAlignment="Right"
                    AutomationProperties.AutomationId="TaskListItemHiddenPanel"
                    Background="Transparent"
                    IsEnabled="{Binding AppSettings.IsQuickActionsEnabled, Source={x:Static local:ViewModelLocator.Instance}}"
                    Opacity="0">
                    <Border.Visibility>
                        <MultiBinding>
                            <MultiBinding.Converter>
                                <local:BoolToVisibilityAndConverter />
                            </MultiBinding.Converter>
                            <Binding Path="AppSettings.IsAnyQuickActionEnabled" Source="{x:Static local:ViewModelLocator.Instance}" />
                            <Binding
                                Mode="OneWay"
                                Path="TextEditorViewModel.IsDisplayMode"
                                UpdateSourceTrigger="PropertyChanged" />
                        </MultiBinding>
                    </Border.Visibility>

                    <Border.Triggers>
                        <EventTrigger RoutedEvent="Border.MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="HoverButtonBorder"
                                        Storyboard.TargetProperty="(Opacity)"
                                        From="0"
                                        To="1"
                                        Duration="0:0:0.10" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="Border.MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="HoverButtonBorder"
                                        Storyboard.TargetProperty="(Opacity)"
                                        From="1"
                                        To="0"
                                        Duration="0:0:0.05" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Border.Triggers>

                    <Behaviors:Interaction.Triggers>
                        <Behaviors:EventTrigger EventName="MouseEnter">
                            <Behaviors:InvokeCommandAction Command="{Binding EnableQuickActionsCommand}" />
                        </Behaviors:EventTrigger>

                        <Behaviors:EventTrigger EventName="MouseLeave">
                            <Behaviors:InvokeCommandAction Command="{Binding DisableQuickActionsCommand}" />
                        </Behaviors:EventTrigger>
                    </Behaviors:Interaction.Triggers>

                    <!--  HOVER PANEL  -->
                    <Border
                        Padding="20 0 10 0"
                        HorizontalAlignment="Right"
                        Background="{DynamicResource TaskListItemHoverPanelBrush}"
                        CornerRadius="0 2 2 0">

                        <StackPanel Orientation="Horizontal">
                            <!--  Calendar empty button  -->
                            <Grid Visibility="{Binding IsReminderOn, Converter={StaticResource boolToVisibilityNegatedConverter}}">
                                <Button
                                    AutomationProperties.AutomationId="TaskListItemCalendarEmptyButton"
                                    Command="{Binding OpenReminderCommand}"
                                    Content="{DynamicResource SegoeIconCalendar}"
                                    Style="{DynamicResource ButtonQuickActionStyle}"
                                    ToolTip="Set Reminder"
                                    IsEnabled="{Binding IsQuickActionsEnabled}"
                                    Visibility="{Binding AppSettings.IsQuickActionsReminderEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />
                            </Grid>

                            <!--  Calendar active button  -->
                            <Grid Visibility="{Binding IsReminderOn, Converter={StaticResource boolToVisibilityConverter}}">
                                <Button
                                    AutomationProperties.AutomationId="TaskListItemCalendarActiveButton"
                                    Command="{Binding OpenReminderCommand}"
                                    Content="{DynamicResource SegoeIconDateTime}"
                                    Style="{DynamicResource ButtonQuickActionStyle}"
                                    IsEnabled="{Binding IsQuickActionsEnabled}"
                                    ToolTip="{Binding ReminderDate, Converter={StaticResource longToFormattedLongDateConverter}}"
                                    Visibility="{Binding AppSettings.IsQuickActionsReminderEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />
                            </Grid>

                            <!--  Marker color  -->
                            <local:SingletonColorPicker
                                SelectedColorString="{Binding Color, Mode=TwoWay}"
                                Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                                Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                                Margin="4 0 0 0"
                                IsEnabled="{Binding IsQuickActionsEnabled}"
                                ToolTip="Marker color"
                                Visibility="{Binding AppSettings.IsQuickActionsColorEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />

                            <!--  Background color picker  -->
                            <local:SingletonColorPicker
                                SelectedColorString="{Binding BackgroundColor, Mode=TwoWay}"
                                Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                                Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                                Margin="4 0 0 0"
                                IsEnabled="{Binding IsQuickActionsEnabled}"
                                ToolTip="Background color"
                                Visibility="{Binding AppSettings.IsQuickActionsBackgroundColorEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />

                            <!--  BorderColor picker  -->
                            <local:SingletonColorPicker
                                SelectedColorString="{Binding BorderColor, Mode=TwoWay}"
                                Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                                Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                                Margin="4 0 0 0"
                                IsEnabled="{Binding IsQuickActionsEnabled}"
                                ToolTip="Border color"
                                Visibility="{Binding AppSettings.IsQuickActionsBorderColorEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />

                            <!--  Pin button  -->
                            <Grid Visibility="{Binding Pinned, Converter={StaticResource boolToVisibilityNegatedConverter}}">
                                <Button
                                    AutomationProperties.AutomationId="TaskListItemPinButton"
                                    Command="{Binding Path=DataContext.PinTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}"
                                    CommandParameter="{Binding DataContext, ElementName=TaskListItemUC}"
                                    Content="{DynamicResource SegoeIconPin}"
                                    Style="{DynamicResource ButtonQuickActionStyle}"
                                    Margin="4 0 0 0"
                                    IsEnabled="{Binding IsQuickActionsEnabled}"
                                    ToolTip="Pin task"
                                    Visibility="{Binding AppSettings.IsQuickActionsPinEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />
                            </Grid>
                            <!--  Unpin button  -->
                            <Grid Visibility="{Binding Pinned, Converter={StaticResource boolToVisibilityConverter}}">
                                <Button
                                    AutomationProperties.AutomationId="TaskListItemUnpinButton"
                                    Command="{Binding Path=DataContext.UnpinTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}"
                                    CommandParameter="{Binding DataContext, ElementName=TaskListItemUC}"
                                    Content="{DynamicResource SegoeIconUnpin}"
                                    Style="{DynamicResource ButtonQuickActionStyle}"
                                    Margin="4 0 0 0"
                                    IsEnabled="{Binding IsQuickActionsEnabled}"
                                    ToolTip="Unpin task"
                                    Visibility="{Binding AppSettings.IsQuickActionsPinEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />
                            </Grid>
                            <!--  Trash button  -->
                            <Button
                                AutomationProperties.AutomationId="TaskListItemTrashBinButton"
                                Command="{Binding Path=DataContext.DeleteTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}"
                                CommandParameter="{Binding DataContext, ElementName=TaskListItemUC}"
                                Content="{DynamicResource SegoeIconTrash}"
                                Cursor="Hand"
                                Style="{DynamicResource ButtonQuickActionRedStyle}"
                                Margin="4 0 0 0"
                                IsEnabled="{Binding IsQuickActionsEnabled}"
                                ToolTip="Trash task"
                                Visibility="{Binding AppSettings.IsQuickActionsTrashEnabled, Source={x:Static local:ViewModelLocator.Instance}, Converter={StaticResource boolToVisibilityConverter}}" />

                        </StackPanel>

                    </Border>
                </Border>

            </Grid>
        </Border>

    </Grid>
</UserControl>