<UserControl x:Class="TodoApp2.TaskListItemControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:local="clr-namespace:TodoApp2"
             xmlns:dd="urn:gong-wpf-dragdrop"
             mc:Ignorable="d"
             dd:DragDrop.DragSourceIgnore="{Binding IsEditMode}"
             MinHeight="40"
             x:Name="TaskListItemUC"
             AutomationProperties.AutomationId="TaskListItemUC"
             d:DesignHeight="60" d:DesignWidth="350">
    
    <UserControl.ContextMenu>
        <ContextMenu Tag="{Binding Tag.DeleteTaskItemCommand, ElementName=TaskListItemUC}">
            <MenuItem Header="Edit" Command="{Binding Path=PlacementTarget.DataContext.EditItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
            <MenuItem Header="Move to" ItemsSource="{Binding CategoryListService.Items, Source={x:Static local:ViewModelLocator.Instance}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}" />
                        <Setter Property="Command" Value="{Binding Path=DataContext.MoveToCategoryCommand, 
                            RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}" />
                        <Setter Property="CommandParameter">
                            <Setter.Value>
                                <MultiBinding Converter="{local:TaskContextMenuCommandParameterConverter}">
                                    <MultiBinding.Bindings>
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType={x:Type local:TaskListItemControl}}" />
                                        <Binding Path="Name"/>
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                        
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="Set reminder" Command="{Binding Path=PlacementTarget.DataContext.OpenReminderCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
            <MenuItem Header="Change color" ItemsSource="{Binding ColorListService.Items, Source={x:Static local:ViewModelLocator.Instance}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Background" Value="{Binding Converter={local:StringRGBToBrushConverter}}" />
                        <Setter Property="Command" Value="{Binding Path=PlacementTarget.DataContext.SetColorCommand, 
                            RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                        <Setter Property="CommandParameter" Value="{Binding}"/>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="Delete" Command="{Binding Path=PlacementTarget.Tag.DeleteTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                      CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />

        </ContextMenu>
    </UserControl.ContextMenu>

    <Grid Background="{DynamicResource ContentBackgroundBrush}">

        <Border Background="{Binding IsDone, Converter={local:BackgroundBrushConverter}}"
                Margin="16 3"
                CornerRadius="8">

            <!--TODO: Make a fade animation instead of this-->
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeave">
                    <i:InvokeCommandAction Command="{Binding HideColorPickerCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Grid>
                <Grid.ColumnDefinitions>
                    <!--Color bar column-->
                    <ColumnDefinition Width="6" />
                    <!--Checkbox column-->
                    <ColumnDefinition Width="36" />
                    <!--Main content column, also the hidden buttons column-->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <!--Color bar-->
                <Border
                    AutomationProperties.AutomationId="TaskListItemColorBar"
                    Grid.Column="0"
                    CornerRadius="8 0 0 8"
                    Background="{Binding Color, Converter={local:StringRGBToBrushConverter}}" />

                <CheckBox
                    AutomationProperties.AutomationId="TaskListItemCheckBox"
                    Grid.Column="1"
                    IsChecked="{Binding IsDone}"
                    Command="{Binding Path=DataContext.TaskIsDoneModifiedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}"
                    CommandParameter="{Binding DataContext, ElementName=TaskListItemUC}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center" Style="{DynamicResource TaskCheckBoxStyle}" />

                <!--Main content-->
                <Grid Grid.Column="2" Margin="6">
                    <Grid.RowDefinitions>
                        <!--Task description row-->
                        <RowDefinition Height="*" />
                        <!--Timestamp row-->
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <!--Task description-->

                    <!--Display formatted text-->
                    <TextBlock
                        AutomationProperties.AutomationId="TaskListItemDisplayText"
                        Name="TaskListItemDisplayText"
                        Grid.Row="0"
                        Visibility="{Binding IsEditMode, Converter={local:BoolToVisibilityNegatedConverter}}"
                        Style="{DynamicResource TaskListItemDescriptionTextBlockStyle}"
                        Opacity="{Binding IsDone, Converter={local:BoolToOpacityConverter}}"
                        Text="{Binding Content, Mode=TwoWay, NotifyOnTargetUpdated=True}"
                        local:InputBindingsManager.FormatTextOnTargetUpdated="TextBlock.Text">
                        <TextBlock.InputBindings>
                            <MouseBinding Gesture="LeftDoubleClick" Command="{Binding EditItemCommand}" />
                        </TextBlock.InputBindings>
                    </TextBlock>

                    <!--Text editor mode-->
                    <TextBox
                        AutomationProperties.AutomationId="TaskListItemEditText"
                        Grid.Row="0"
                        Visibility="{Binding IsEditMode, Converter={local:BoolToVisibilityConverter}}"
                        local:FocusSetter.Value="{Binding IsEditMode}"
                        Style="{DynamicResource TaskListItemDescriptionTextBoxStyle}"
                        Opacity="{Binding IsDone, Converter={local:BoolToOpacityConverter}}"
                        Text="{Binding PendingEditContent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        PreviewKeyDown="TextBox_PreviewKeyDown">

                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="LostFocus">
                                <i:InvokeCommandAction Command="{Binding UpdateItemContentCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>

                    <!--Timestamp-->
                    <!--<TextBlock Grid.Row="1"
                               Text="2020-04-22 20:57"
                               Foreground="{DynamicResource TimestampForegroundBrush}"
                               />-->
                </Grid>

                <!--Hidden buttons-->
                <Border
                    AutomationProperties.AutomationId="TaskListItemHiddenPanel"
                    Grid.Column="2"
                    x:Name="HoverButtonBorder"
                    Opacity="0"
                    Background="Transparent"
                    HorizontalAlignment="Right"
                    Visibility="{Binding IsEditMode, Converter={local:BoolToVisibilityNegatedConverter}}"
                    Width="100">

                    <Border.Triggers>
                        <EventTrigger RoutedEvent="Border.MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        From="0"
                                        To="1"
                                        Duration="0:0:0.35"
                                        Storyboard.TargetName="HoverButtonBorder"
                                        Storyboard.TargetProperty="(Opacity)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="Border.MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        From="1"
                                        To="0"
                                        Duration="0:0:0.15"
                                        Storyboard.TargetName="HoverButtonBorder"
                                        Storyboard.TargetProperty="(Opacity)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Border.Triggers>

                    <!--HOVER PANEL-->
                    <Border HorizontalAlignment="Right"
                            CornerRadius="0 8 8 0"
                            Background="{DynamicResource TaskListItemHoverPanelBrush}"
                            Padding="10 0 0 0">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <!--Calendar button-->
                            <Button
                                AutomationProperties.AutomationId="TaskListItemCalendarButton"
                                Grid.Column="0"
                                Style="{DynamicResource TaskItemButtonStyle}"
                                Content="{DynamicResource SegoeIconDateTime}"
                                Command="{Binding OpenReminderCommand}" />
                            <!--Palette button-->
                            <Button
                                AutomationProperties.AutomationId="TaskListItemPaletteButton"
                                Grid.Column="1"
                                Style="{DynamicResource TaskItemButtonYellowStyle}"
                                Content="{DynamicResource SegoeIconPalette}"
                                Command="{Binding ShowColorPickerCommand}" />
                            <!--Trash button-->
                            <Button
                                AutomationProperties.AutomationId="TaskListItemTrashBinButton"
                                Grid.Column="2"
                                Style="{DynamicResource TaskItemButtonRedStyle}"
                                Content="{DynamicResource SegoeIconTrash}"
                                Command="{Binding Path=DataContext.DeleteTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}"
                                CommandParameter="{Binding DataContext, ElementName=TaskListItemUC}" />
                        </Grid>
                    </Border>
                </Border>

                <local:ColorPickerControl
                    AutomationProperties.AutomationId="TaskListItemColorPickerControl"
                    Grid.Column="2"
                    HorizontalContentAlignment="Right"
                    Visibility="{Binding ColorPickerVisible, Converter={local:BoolToVisibilityConverter}}"
                    Margin="0 0 30 0" />
            </Grid>
        </Border>
    </Grid>
</UserControl>