<UserControl
    x:Class="TodoApp2.TaskListItemControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dd="urn:gong-wpf-dragdrop"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:local="clr-namespace:TodoApp2"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    x:Name="TaskListItemUC"
    MinHeight="40"
    d:DesignHeight="60"
    d:DesignWidth="350"
    dd:DragDrop.DragSourceIgnore="{Binding IsEditMode}"
    AutomationProperties.AutomationId="TaskListItemUC"
    mc:Ignorable="d">

    <UserControl.ContextMenu>
        <ContextMenu Tag="{Binding Tag.DeleteTaskItemCommand, ElementName=TaskListItemUC}">
            <MenuItem Command="{Binding Path=PlacementTarget.DataContext.EditItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Edit" />
            <MenuItem Command="{Binding Path=PlacementTarget.DataContext.OpenReminderCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Set reminder" />
            <MenuItem Header="Move to" ItemsSource="{Binding CategoryListService.Items, Source={x:Static local:ViewModelLocator.Instance}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}" />
                        <Setter Property="Command" Value="{Binding Path=DataContext.MoveToCategoryCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}" />
                        <Setter Property="CommandParameter">
                            <Setter.Value>
                                <MultiBinding Converter="{local:TaskContextMenuCommandParameterConverter}">
                                    <MultiBinding.Bindings>
                                        <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType={x:Type local:TaskListItemControl}}" />
                                        <Binding Path="Name" />
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="Change color" ItemsSource="{Binding ColorListService.Items, Source={x:Static local:ViewModelLocator.Instance}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding}" />
                        <Setter Property="Foreground" Value="{Binding Converter={local:StringRGBToBrushConverter}}" />
                        <Setter Property="Command" Value="{Binding Path=PlacementTarget.DataContext.SetColorCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                        <Setter Property="CommandParameter" Value="{Binding}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
                <MenuItem.ItemTemplate>
                    <DataTemplate>
                        <Border
                            Width="50"
                            Height="15"
                            Background="{Binding Converter={local:StringRGBToBrushConverter}}"
                            BorderBrush="Black"
                            BorderThickness="1" />
                    </DataTemplate>
                </MenuItem.ItemTemplate>
            </MenuItem>
            <Separator />
            <MenuItem
                Command="{Binding Path=PlacementTarget.Tag.DeleteTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                Header="Delete" />

        </ContextMenu>
    </UserControl.ContextMenu>

    <Grid Background="{DynamicResource ContentBackgroundBrush}">

        <!--  Background="{Binding IsDone, Converter={local:BackgroundBrushConverter}}"  -->
        <Border Margin="16 3" CornerRadius="2">
            <Border.Background>
                <MultiBinding Converter="{local:BackgroundBrushConverter}" UpdateSourceTrigger="PropertyChanged">
                    <Binding Path="IsDone" />
                    <Binding Path="ApplicationViewModel.ApplicationSettings.IsItemBackgroundVisible" Source="{x:Static local:ViewModelLocator.Instance}" />
                </MultiBinding>
            </Border.Background>

            <Grid>
                <Grid.ColumnDefinitions>
                    <!--  Color bar column  -->
                    <ColumnDefinition Width="5" />
                    <!--  Checkbox column  -->
                    <ColumnDefinition Width="36" />
                    <!--  Main content column, also the hidden buttons column  -->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <!--  Color bar  -->
                <Border
                    Grid.Column="0"
                    AutomationProperties.AutomationId="TaskListItemColorBar"
                    Background="{Binding Color, Converter={local:StringRGBToBrushConverter}}"
                    CornerRadius="2 0 0 2" />

                <CheckBox
                    Grid.Column="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    AutomationProperties.AutomationId="TaskListItemCheckBox"
                    Command="{Binding Path=DataContext.TaskIsDoneModifiedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}"
                    CommandParameter="{Binding DataContext, ElementName=TaskListItemUC}"
                    IsChecked="{Binding IsDone}"
                    Style="{DynamicResource TaskCheckBoxStyle}" />

                <!--  Main content  -->
                <Grid Grid.Column="2" Margin="6">
                    <Grid.RowDefinitions>
                        <!--  Task description row  -->
                        <RowDefinition Height="*" />
                        <!--  Timestamp row  -->
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <!--  Task description  -->

                    <!--  Display formatted text  -->
                    <TextBlock
                        Name="TaskListItemDisplayText"
                        Grid.Row="0"
                        local:InputBindingsManager.FormatTextOnTargetUpdated="TextBlock.Text"
                        AutomationProperties.AutomationId="TaskListItemDisplayText"
                        Focusable="False"
                        Opacity="{Binding IsDone, Converter={local:BoolToOpacityConverter}}"
                        Style="{DynamicResource TaskListItemDescriptionTextBlockStyle}"
                        Text="{Binding Content, Mode=TwoWay, NotifyOnTargetUpdated=True}"
                        Visibility="{Binding IsEditMode, Converter={local:BoolToVisibilityNegatedConverter}}">
                        <TextBlock.InputBindings>
                            <MouseBinding Command="{Binding EditItemCommand}" Gesture="LeftDoubleClick" />
                        </TextBlock.InputBindings>
                    </TextBlock>

                    <!--  Text editor mode  -->
                    <!--  IMPORTANT: FocusSetter Attached property must be after Visibility property in order to work!  -->
                    <TextBox
                        Grid.Row="0"
                        AutomationProperties.AutomationId="TaskListItemEditText"
                        Opacity="{Binding IsDone, Converter={local:BoolToOpacityConverter}}"
                        PreviewKeyDown="TextBox_PreviewKeyDown"
                        Style="{DynamicResource TaskListItemDescriptionTextBoxStyle}"
                        Text="{Binding PendingEditContent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Visibility="{Binding IsEditMode, Converter={local:BoolToVisibilityConverter}}"
                        local:FocusSetter.Value="{Binding IsEditMode}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="LostFocus">
                                <i:InvokeCommandAction Command="{Binding UpdateItemContentCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>

                    <!--  Timestamp  -->
                    <TextBlock
                        Grid.Row="1"
                        Visibility="{Binding ApplicationViewModel.ApplicationSettings.IsModificationDateVisible, Source={x:Static local:ViewModelLocator.Instance}, Converter={local:BoolToVisibilityConverter}}"
                        Opacity="{Binding IsDone, Converter={local:BoolToOpacityConverter}}"
                        Text="{Binding ModificationDate, Converter={local:LongToTimestampConverter}}"
                        FontFamily="{StaticResource FreeSans}"
                        FontSize="{StaticResource FontSizeSmallest}"
                        Foreground="{DynamicResource TimestampForegroundBrush}" />
                </Grid>

                <!--  Hidden buttons  -->
                <Border
                    x:Name="HoverButtonBorder"
                    Grid.Column="2"
                    Width="100"
                    HorizontalAlignment="Right"
                    AutomationProperties.AutomationId="TaskListItemHiddenPanel"
                    Background="Transparent"
                    IsEnabled="{Binding ApplicationViewModel.ApplicationSettings.IsQuickActionsEnabled, Source={x:Static local:ViewModelLocator.Instance}}"
                    Opacity="0"
                    Visibility="{Binding IsEditMode, Converter={local:BoolToVisibilityNegatedConverter}}">

                    <Border.Triggers>
                        <EventTrigger RoutedEvent="Border.MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="HoverButtonBorder"
                                        Storyboard.TargetProperty="(Opacity)"
                                        From="0"
                                        To="1"
                                        Duration="0:0:0.35" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="Border.MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="HoverButtonBorder"
                                        Storyboard.TargetProperty="(Opacity)"
                                        From="1"
                                        To="0"
                                        Duration="0:0:0.15" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Border.Triggers>

                    <!--  HOVER PANEL  -->
                    <Border
                        Padding="10 0 0 0"
                        HorizontalAlignment="Right"
                        Background="{DynamicResource TaskListItemHoverPanelBrush}"
                        CornerRadius="0 2 2 0">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <!--  Calendar button  -->
                            <Button
                                Grid.Column="0"
                                AutomationProperties.AutomationId="TaskListItemCalendarButton"
                                Command="{Binding OpenReminderCommand}"
                                Content="{DynamicResource SegoeIconDateTime}"
                                Style="{DynamicResource TaskItemButtonStyle}" />
                            <!--  Palette button  -->
                            <Button
                                Grid.Column="1"
                                AutomationProperties.AutomationId="TaskListItemPaletteButton"
                                Command="{Binding ShowColorPickerCommand}"
                                Content="{DynamicResource SegoeIconPalette}"
                                Style="{DynamicResource TaskItemButtonYellowStyle}" />
                            <!--  Trash button  -->
                            <Button
                                Grid.Column="2"
                                AutomationProperties.AutomationId="TaskListItemTrashBinButton"
                                Command="{Binding Path=DataContext.DeleteTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type local:TaskListControl}}}"
                                CommandParameter="{Binding DataContext, ElementName=TaskListItemUC}"
                                Content="{DynamicResource SegoeIconTrash}"
                                Style="{DynamicResource TaskItemButtonRedStyle}" />
                        </Grid>
                    </Border>
                </Border>

                <local:ColorPickerControl
                    Grid.Column="2"
                    Margin="0 0 24 0"
                    HorizontalContentAlignment="Right"
                    AutomationProperties.AutomationId="TaskListItemColorPickerControl"
                    Visibility="{Binding ColorPickerVisible, Converter={local:BoolToVisibilityConverter}}">

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeave">
                            <i:InvokeCommandAction Command="{Binding HideColorPickerCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>

                </local:ColorPickerControl>
            </Grid>
        </Border>
    </Grid>
</UserControl>