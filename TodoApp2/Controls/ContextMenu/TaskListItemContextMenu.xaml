<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:local="clr-namespace:TodoApp2" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  PlacementTarget.Tag         : TaskPageViewModel  -->
    <!--  PlacementTarget.DataContext : TaskViewModel  -->

    <ContextMenu x:Name="TaskListItemContextMenu_" x:Key="TaskListItemContextMenu_">

        <!--  "Mark as completed"  -->
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.ToggleTaskIsDoneCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Mark as completed"
            Icon="{StaticResource ctxIconCompleted}"
            Visibility="{Binding Path=PlacementTarget.DataContext.IsDone, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityNegatedConverter}}" />

        <!--  "Mark as not completed"  -->
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.ToggleTaskIsDoneCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Mark as not completed"
            Icon="{StaticResource ctxIconNotCompleted}"
            Visibility="{Binding Path=PlacementTarget.DataContext.IsDone, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityConverter}}" />

        <!--  ============================================================  -->
        <Separator />

        <!--  Pin  -->
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.PinTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Pin"
            Icon="{StaticResource ctxIconPin}"
            Visibility="{Binding Path=PlacementTarget.DataContext.Pinned, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityNegatedConverter}}" />

        <!--  Unpin  -->
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.UnpinTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Unpin"
            Icon="{StaticResource ctxIconUnpin}"
            Visibility="{Binding Path=PlacementTarget.DataContext.Pinned, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityConverter}}" />

        <!--  Edit  -->
        <MenuItem Command="{Binding Path=PlacementTarget.DataContext.EditItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Edit" Icon="{StaticResource ctxIconEdit}" />

        <!--  Set reminder  -->
        <MenuItem Command="{Binding Path=PlacementTarget.DataContext.OpenReminderCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Set reminder" Icon="{StaticResource ctxIconReminder}" />

        <!--  ============================================================  -->
        <Separator />

        <MenuItem
            Header="Colors" HorizontalAlignment="Center" IsEnabled="False"
            Foreground="{DynamicResource OnSurface}" />

        <!--  Marker color  -->
        <MenuItem Header="Marker">
            <MenuItem.Template>
                <ControlTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Label Grid.Column="0" Content="{StaticResource ctxIconColor1}" />
                        <Label Grid.Column="1" Style="{DynamicResource BaseLabelClearTypeStyle}">Marker</Label>
                        <local:SingletonColorPicker
                            Grid.Column="3"
                            SelectedColorString="{Binding PlacementTarget.DataContext.Color, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            ColorChangedNotification="{Binding PlacementTarget.DataContext.ColorChangedNotification, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:VML.Instance}}"
                            Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:VML.Instance}}"
                            Margin="4 0 0 0" ToolTip="Marker color" />
                    </Grid>
                </ControlTemplate>
            </MenuItem.Template>
        </MenuItem>

        <!--  Background color  -->
        <MenuItem Header="Background">
            <MenuItem.Template>
                <ControlTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Label Grid.Column="0" Content="{StaticResource ctxIconColor2}" />
                        <Label Grid.Column="1" Style="{DynamicResource BaseLabelClearTypeStyle}">Background</Label>
                        <local:SingletonColorPicker
                            Grid.Column="3"
                            SelectedColorString="{Binding PlacementTarget.DataContext.BackgroundColor, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            ColorChangedNotification="{Binding PlacementTarget.DataContext.ColorChangedNotification, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:VML.Instance}}"
                            Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:VML.Instance}}"
                            Margin="4 0 0 0" ToolTip="Background color" />
                    </Grid>
                </ControlTemplate>
            </MenuItem.Template>
        </MenuItem>

        <!--  Border color  -->
        <MenuItem Header="Border">
            <MenuItem.Template>
                <ControlTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Label Grid.Column="0" Content="{StaticResource ctxIconColor3}" />
                        <Label Grid.Column="1" Style="{DynamicResource BaseLabelClearTypeStyle}">
                            Border
                        </Label>
                        <local:SingletonColorPicker
                            Grid.Column="3"
                            SelectedColorString="{Binding PlacementTarget.DataContext.BorderColor, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            ColorChangedNotification="{Binding PlacementTarget.DataContext.ColorChangedNotification, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:VML.Instance}}"
                            Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:VML.Instance}}"
                            Margin="4 0 0 0" ToolTip="Border color" />
                    </Grid>
                </ControlTemplate>
            </MenuItem.Template>
        </MenuItem>

        <!--  ============================================================  -->
        <Separator />

        <!--  Sort by  -->
        <MenuItem Header="Sort by" Icon="{StaticResource ctxIconSort}">
            <MenuItem Header="state" Command="{Binding Path=PlacementTarget.Tag.SortByStateCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
            <MenuItem Header="creation date">
                <MenuItem Header="ascending" Command="{Binding Path=PlacementTarget.Tag.SortByCreationDateCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                <MenuItem Header="descending" Command="{Binding Path=PlacementTarget.Tag.SortByCreationDateDescCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
            </MenuItem>
            <MenuItem Header="modification date">
                <MenuItem Header="ascending" Command="{Binding Path=PlacementTarget.Tag.SortByModificationDateCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                <MenuItem Header="descending" Command="{Binding Path=PlacementTarget.Tag.SortByModificationDateDescCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
            </MenuItem>
        </MenuItem>

        <!--  Move to top  -->
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.MoveToTopCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Move to top"
            Icon="{StaticResource ctxIconMoveToTop}" />

        <!--  Move to bottom  -->
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.MoveToBottomCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Move to bottom"
            Icon="{StaticResource ctxIconMoveToBottom}" />

        <!--  ============================================================  -->
        <Separator />

        <!--  Move this item to  -->
        <MenuItem Header="Move this item to" ItemsSource="{Binding CategoryListService.InactiveCategories, Source={x:Static local:VML.Instance}}" Icon="{StaticResource ctxIconMoveTo}">
            <MenuItem.ItemContainerStyle>
                <Style TargetType="MenuItem">
                    <Setter Property="Header" Value="{Binding Name}" />
                    <Setter Property="Command" Value="{Binding Path=PlacementTarget.Tag.MoveToCategoryCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                    <Setter Property="CommandParameter">
                        <Setter.Value>
                            <MultiBinding Converter="{local:TaskContextMenuCommandParameterConverter}">
                                <MultiBinding.Bindings>
                                    <Binding Path="PlacementTarget.DataContext" RelativeSource="{RelativeSource AncestorType={x:Type ContextMenu}}" />
                                    <Binding Path="." />
                                </MultiBinding.Bindings>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Style>
            </MenuItem.ItemContainerStyle>
        </MenuItem>

        <!--  Move all  -->
        <MenuItem Header="Move all" Icon="{StaticResource ctxIconMoveTo}">
            <MenuItem Header="items to" ItemsSource="{Binding CategoryListService.InactiveCategories, Source={x:Static local:VML.Instance}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}" />
                        <Setter Property="Command" Value="{Binding Path=PlacementTarget.Tag.MoveAllToCategoryCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                        <Setter Property="CommandParameter" Value="{Binding}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="completed items to" ItemsSource="{Binding CategoryListService.InactiveCategories, Source={x:Static local:VML.Instance}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}" />
                        <Setter Property="Command" Value="{Binding Path=PlacementTarget.Tag.MoveAllCompletedToCategoryCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                        <Setter Property="CommandParameter" Value="{Binding}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="incomplete items to" ItemsSource="{Binding CategoryListService.InactiveCategories, Source={x:Static local:VML.Instance}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}" />
                        <Setter Property="Command" Value="{Binding Path=PlacementTarget.Tag.MoveAllIncompleteToCategoryCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                        <Setter Property="CommandParameter" Value="{Binding}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
        </MenuItem>


        <!--  Reset all  -->
        <MenuItem Header="Reset all" Icon="{StaticResource ctxIconReset}">
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetAllStatesCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="state" ToolTip="Resets completed and pinned states." />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetAllColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="colors" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="marker colors" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetBackgroundColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="background colors" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetBorderColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="border colors" />
        </MenuItem>

        <!--  Delete all  -->
        <MenuItem Header="Delete all" Icon="{StaticResource ctxIconDelete1}">
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteAllCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="items" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteCompletedCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="completed items" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteIncompleteCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="incomplete items" />
        </MenuItem>

        <!--  ============================================================  -->
        <Separator />

        <!--  Delete  -->
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.DeleteTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Delete"
            Icon="{StaticResource ctxIconDelete2}" />

    </ContextMenu>

</ResourceDictionary>