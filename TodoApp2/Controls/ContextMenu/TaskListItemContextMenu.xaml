<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:local="clr-namespace:TodoApp2"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  PlacementTarget.Tag         : TaskPageViewModel  -->
    <!--  PlacementTarget.DataContext : TaskViewModel  -->

    <ContextMenu x:Name="TaskListItemContextMenu_" x:Key="TaskListItemContextMenu_">
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.ToggleTaskIsDoneCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Mark as completed"
            Visibility="{Binding Path=PlacementTarget.DataContext.IsDone, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityNegatedConverter}}" />
        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.ToggleTaskIsDoneCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Mark as not completed"
            Visibility="{Binding Path=PlacementTarget.DataContext.IsDone, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityConverter}}" />

        <!--  ============================================================  -->
        <Separator />

        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.PinTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Pin"
            Visibility="{Binding Path=PlacementTarget.DataContext.Pinned, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityNegatedConverter}}" />

        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.UnpinTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Unpin"
            Visibility="{Binding Path=PlacementTarget.DataContext.Pinned, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Converter={StaticResource boolToVisibilityConverter}}" />

        <MenuItem Command="{Binding Path=PlacementTarget.DataContext.EditItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Edit" />
        <MenuItem Command="{Binding Path=PlacementTarget.DataContext.OpenReminderCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Set reminder" />


        <!--  ============================================================  -->
        <Separator />

        <MenuItem Header="Marker color">
            <MenuItem.Template>
                <ControlTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Label Style="{DynamicResource BaseLabelClearTypeStyle}" Margin="6 0 0 0">Marker color</Label>
                        <local:SingletonColorPicker
                            Grid.Column="2"
                            SelectedColorString="{Binding PlacementTarget.DataContext.Color, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            ColorChangedNotification="{Binding PlacementTarget.DataContext.ColorChangedNotification, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                            Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                            Margin="4 0 0 0"
                            ToolTip="Marker color" />
                    </Grid>
                </ControlTemplate>
            </MenuItem.Template>
        </MenuItem>

        <MenuItem Header="Background color">
            <MenuItem.Template>
                <ControlTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Label Style="{DynamicResource BaseLabelClearTypeStyle}" Margin="6 0 0 0">Background color</Label>
                        <local:SingletonColorPicker
                            Grid.Column="2"
                            SelectedColorString="{Binding PlacementTarget.DataContext.BackgroundColor, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            ColorChangedNotification="{Binding PlacementTarget.DataContext.ColorChangedNotification, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                            Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                            Margin="4 0 0 0"
                            ToolTip="Background color" />
                    </Grid>
                </ControlTemplate>
            </MenuItem.Template>
        </MenuItem>

        <MenuItem Header="Border color">
            <MenuItem.Template>
                <ControlTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Label Style="{DynamicResource BaseLabelClearTypeStyle}" Margin="6 0 0 0">Border color</Label>
                        <local:SingletonColorPicker
                            Grid.Column="2"
                            SelectedColorString="{Binding PlacementTarget.DataContext.BorderColor, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            ColorChangedNotification="{Binding PlacementTarget.DataContext.ColorChangedNotification, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                            Width="{Binding UIScaler.ColorPickerWidth, Source={x:Static local:ViewModelLocator.Instance}}"
                            Height="{Binding UIScaler.ColorPickerHeight, Source={x:Static local:ViewModelLocator.Instance}}"
                            Margin="4 0 0 0"
                            ToolTip="Border color" />
                    </Grid>
                </ControlTemplate>
            </MenuItem.Template>
        </MenuItem>

        <!--  ============================================================  -->
        <Separator />

        <MenuItem Command="{Binding Path=PlacementTarget.Tag.SortByStateCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Sort by state" />

        <!--  ============================================================  -->
        <Separator />

        <MenuItem Header="Move item to ..." ItemsSource="{Binding CategoryListService.InactiveCategories, Source={x:Static local:ViewModelLocator.Instance}}">
            <MenuItem.ItemContainerStyle>
                <Style TargetType="MenuItem">
                    <Setter Property="Header" Value="{Binding Name}" />
                    <Setter Property="Command" Value="{Binding Path=PlacementTarget.Tag.MoveToCategoryCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                    <Setter Property="CommandParameter">
                        <Setter.Value>
                            <MultiBinding Converter="{local:TaskContextMenuCommandParameterConverter}">
                                <MultiBinding.Bindings>
                                    <Binding Path="PlacementTarget.DataContext" RelativeSource="{RelativeSource AncestorType={x:Type ContextMenu}}" />
                                    <Binding Path="." />
                                </MultiBinding.Bindings>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Style>
            </MenuItem.ItemContainerStyle>
        </MenuItem>

        <MenuItem Header="Reset all ...">
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Marker colors in category" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetBackgroundColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Background colors in category" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.ResetBorderColorsCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Border colors in category" />
        </MenuItem>

        <MenuItem Header="Delete all ...">
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteAllCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Items in category" />
            <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteDoneCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="Completed items in category" />
        </MenuItem>

        <!--  ============================================================  -->
        <Separator />

        <MenuItem
            Command="{Binding Path=PlacementTarget.Tag.DeleteTaskItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            CommandParameter="{Binding Path=PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
            Header="Delete" />

    </ContextMenu>

</ResourceDictionary>